////DFS Traversals:

1. Inorder Traversal  (2 types)
Type 1: Recursion (Easy)

    public List<Integer> InorderTraversal(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        tarverse(root,l);
        return l;
    }
    public void traverse(TreeNode root,List<Integer> l){
        if(root==null) return;
        traverse(root.left,l);
        l.add(root.val);                ///this line will be swapped in 13 and 15 for preorder and post order (Covers recursive trav for same)
        traverse(root.right,l);
    }

Type 2: Using Stack(LIFO)
public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        Stack<TreeNode> st=new Stack<>();
        TreeNode node=root;
        while(true){
            if(node!=null){
                st.push(node);
                node=node.left;
            }else{
                if(st.isEmpty()){
                    break;
                }
                    node=st.pop();
                    ans.add(node.val);
                    node=node.right;
            }
        }
        return ans;
  }

2. Preorder Traversal  (2 types)
Type 1: Recursion (Easy) Refer to the above rec in indorder

Type 2: Using Stack(LIFO)
public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        Stack<TreeNode> st=new Stack<>();
        if(root==null)return l;
        st.push(root);
        while(!st.isEmpty()){
            TreeNode e=st.pop();
            l.add(e.val);
            if(e.right!=null)st.push(e.right);
            if(e.left!=null)st.push(e.left);
        }
        return l;
  }

3. Postorder Traversal 
same like inorder recursion


/////BFS Traversal:(Level Order Traversal)   ***VVVVV Important*****

public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null)return ans;
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> l=new ArrayList<>();
            for(int i=0;i<size;i++){
                if(q.peek().left!=null)q.offer(q.peek().left);
                if(q.peek().right!=null)q.offer(q.peek().right);
                l.add(q.poll().val);
            }
            ans.add(l);
        }
        return ans;
    }
