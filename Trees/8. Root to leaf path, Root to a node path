///////////////////////////////Root to leaf path
Input: root[] = [1, 2, 3, 4, 5]
            1
          2   3
        4  5
Output: [[1, 2, 4], [1, 2, 5], [1, 3]] 

class Solution {
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        // code here
        ArrayList<ArrayList<Integer>> ans=new ArrayList();
        nodeToRoot(root,new ArrayList<Integer>(),ans);
        return ans;
    }
    static void nodeToRoot(Node root,ArrayList<Integer> temp,ArrayList<ArrayList<Integer>> ans){
        if(root==null)return;
        temp.add(root.data);
        if(root.left==null&&root.right==null){
            ans.add(new ArrayList<>(temp));
            temp.remove(temp.size()-1);
            return;
        }
        nodeToRoot(root.left,temp,ans);
        nodeToRoot(root.right,temp,ans);
        temp.remove(temp.size()-1);
    }
}

///////////////////////////////Root to leaf path change in output pattern
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans=new ArrayList();
        nodeToRoot(root,""+root.val+"->",ans);
        return ans;
    }
    void nodeToRoot(TreeNode root,String temp,List<String> ans){
        if(root==null)return;
        if(root.left==null&&root.right==null){
            temp=temp.substring(0,temp.length()-2);
            ans.add(temp);
            return;
        }
        if(root.left!=null){
        nodeToRoot(root.left,temp+root.left.val+"->",ans);}
        if(root.right!=null){
        nodeToRoot(root.right,temp+root.right.val+"->",ans);}
    }
}


////////////////////////////Root to a particular node path exists or not
class Solution{
    public ArrayList<Integer> binaryTreePaths(TreeNode root,int B) {
        ArrayList<Integer> ans=new ArrayList();
        if(root==null)return ans;
        nodeToRoot(root,ans,B);
        return ans;
    }
    boolean nodeToRoot(TreeNode root,ArrayList<Integer> ans,int B){
        if(root==null)return false;
        ans.add(root.val);
        if(root.val==B)return true;
        if(nodeToRoot(root.left,ans,B)||nodeToRoot(root.right,ans,B)){
            return true;
        }
        ans.remove(ans.size()-1);
        return false;
    }
}
