ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> ans=new ArrayList();
        if(node==null)return ans;
        if(!leaf(node)){
             ans.add(node.data);   
        }
        leftSide(node,ans);
        leaves(node,ans);
        rightSide(node,ans);
        return ans;
    }
    void leftSide(Node node,ArrayList<Integer> ans){
        node=node.left;
        while(node!=null){
            if(!leaf(node)){
            ans.add(node.data);}
            if(node.left!=null){
                node=node.left;
            }else{
                node=node.right;
            }
        }
    }
    void rightSide(Node node,ArrayList<Integer> ans){
        node=node.right;
        ArrayList<Integer> temp=new ArrayList();
        while(node!=null){
            if(!leaf(node)){
            temp.add(node.data);}
            if(node.right!=null){
                node=node.right;
            }else{
                node=node.left;
            }
        }
        for(int i=temp.size()-1;i>=0;i--){
            ans.add(temp.get(i));
        }
    }
    void leaves(Node node,ArrayList<Integer> ans){
        if(leaf(node)){
            ans.add(node.data);
        }
        if(node.left!=null){
            leaves(node.left,ans);
        }
        if(node.right!=null){
            leaves(node.right,ans);
        }
    }
    boolean leaf(Node node){
        if(node.left==null&&node.right==null){
            return true;
        }
        return false;
    }
